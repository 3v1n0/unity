=== modified file 'UnityCore/DBusIndicators.cpp'
--- a/UnityCore/DBusIndicators.cpp	2011-08-01 14:24:34 +0000
+++ b/UnityCore/DBusIndicators.cpp	2011-07-29 10:18:29 +0000
@@ -434,6 +434,13 @@
       RequestSyncAll();
     }
   }
+  else if (signal_name == "ActiveMenuPointerMotion")
+  {
+    int x = 0;
+    int y = 0;
+    g_variant_get(parameters, "(ii)", &x, &y);
+    owner_->on_menu_pointer_moved.emit(x, y);
+  }
   else if (signal_name == "EntryShowNowChanged")
   {
     gchar*    id = NULL;

=== modified file 'UnityCore/Indicators.h'
--- a/UnityCore/Indicators.h	2011-07-29 07:15:54 +0000
+++ b/UnityCore/Indicators.h	2011-07-21 20:24:04 +0000
@@ -64,6 +64,14 @@
   sigc::signal<void, Indicator::Ptr const&> on_object_removed;
 
   /**
+   * This signal is emitted when an entry is activated and the user moves the
+   * mouse.
+   * @param x x coordinate
+   * @param y y coordinate
+   */
+  sigc::signal<void, int, int> on_menu_pointer_moved;
+
+  /**
    * Service wants the view to activate an entry.
    * Example use-case: user has activated an entry with the mouse and pressed
    * Left or Right key to activate previous or next entry.

=== modified file 'plugins/unityshell/src/PanelIndicatorObjectEntryView.cpp'
--- a/plugins/unityshell/src/PanelIndicatorObjectEntryView.cpp	2011-07-29 07:15:54 +0000
+++ b/plugins/unityshell/src/PanelIndicatorObjectEntryView.cpp	2011-07-22 14:04:58 +0000
@@ -101,15 +101,11 @@
                      GetAbsoluteY() + PANEL_HEIGHT,
                      time(NULL),
                      nux::GetEventButton(button_flags));
-    proxy_->set_active(true);
-    //
-    // ^ Set active even before the menu appears. This allows the below
-    //   Refresh call to know it should draw_menu_bg() immediately
-    //   rather than waiting for slow inter-process communication with
-    //   unity-panel-service, which causes visible lag in many cases.
-    //
-  }
-  Refresh();
+  }
+  else
+  {
+    Refresh();
+  }
 }
 
 void PanelIndicatorObjectEntryView::OnMouseUp(int x, int y, long button_flags, long key_flags)

=== modified file 'plugins/unityshell/src/PanelView.cpp'
--- a/plugins/unityshell/src/PanelView.cpp	2011-07-29 08:55:26 +0000
+++ b/plugins/unityshell/src/PanelView.cpp	2011-07-28 11:02:56 +0000
@@ -79,6 +79,7 @@
 
   _remote = indicator::DBusIndicators::Ptr(new indicator::DBusIndicators());
   _remote->on_object_added.connect(sigc::mem_fun(this, &PanelView::OnObjectAdded));
+  _remote->on_menu_pointer_moved.connect(sigc::mem_fun(this, &PanelView::OnMenuPointerMoved));
   _remote->on_entry_activate_request.connect(sigc::mem_fun(this, &PanelView::OnEntryActivateRequest));
   _remote->on_entry_activated.connect(sigc::mem_fun(this, &PanelView::OnEntryActivated));
   _remote->on_synced.connect(sigc::mem_fun(this, &PanelView::OnSynced));
@@ -99,14 +100,10 @@
                                                      this);
    // request the latest colour from bghash
    ubus_server_send_message (ubus, UBUS_BACKGROUND_REQUEST_COLOUR_EMIT, NULL);
-
-  _track_menu_pointer_id = 0;
 }
 
 PanelView::~PanelView()
 {
-  if (_track_menu_pointer_id)
-    g_source_remove(_track_menu_pointer_id);
   _style->UnReference();
   UBusServer *ubus = ubus_server_get_default();
   ubus_server_unregister_interest(ubus, _handle_bg_color_update);
@@ -346,41 +343,10 @@
   }
 }
 
-static gboolean track_menu_pointer(gpointer data)
-{
-  PanelView *self = (PanelView*)data;
-  gint x, y;
-  gdk_display_get_pointer(gdk_display_get_default(), NULL, &x, &y, NULL);
-  self->OnMenuPointerMoved(x, y);
-  return TRUE;
-}
-
 void PanelView::OnEntryActivated(std::string const& entry_id)
 {
-  bool active = (entry_id.size() > 0);
-  if (active && !_track_menu_pointer_id)
-  {
-    //
-    // Track menus being scrubbed at 60Hz (about every 16 millisec)
-    // It might sound ugly, but it's far nicer (and more responsive) than the
-    // code it replaces which used to capture motion events in another process
-    // (unity-panel-service) and send them to us over dbus.
-    // NOTE: The reason why we have to use a timer instead of tracking motion
-    // events is because the motion events will never be delivered to this
-    // process. All the motion events will go to unity-panel-service while
-    // scrubbing because the active panel menu has (needs) the pointer grab.
-    //
-    _track_menu_pointer_id = g_timeout_add(16, track_menu_pointer, this);
-  }
-  else if (!active)
-  {
-    if (_track_menu_pointer_id)
-    {
-      g_source_remove(_track_menu_pointer_id);
-      _track_menu_pointer_id = 0;
-    }
+  if (entry_id == "")
     _menu_view->AllMenusClosed();
-  }
 }
 
 void PanelView::OnSynced()

=== modified file 'plugins/unityshell/src/PanelView.h'
--- a/plugins/unityshell/src/PanelView.h	2011-07-29 07:15:54 +0000
+++ b/plugins/unityshell/src/PanelView.h	2011-07-28 11:02:56 +0000
@@ -116,7 +116,6 @@
   guint       _handle_dash_hidden;
   guint       _handle_dash_shown;
   guint       _handle_bg_color_update;
-  guint       _track_menu_pointer_id;
 };
 
 }

=== modified file 'services/panel-main.c'
--- a/services/panel-main.c	2011-07-29 07:15:54 +0000
+++ b/services/panel-main.c	2011-07-21 20:24:04 +0000
@@ -85,6 +85,11 @@
   "     <arg type='s' name='indicator_id' />"
   "    </signal>"
   ""
+  "    <signal name='ActiveMenuPointerMotion'>"
+  "     <arg type='i' name='x' />"
+  "     <arg type='i' name='y' />"
+  "    </signal>"
+  ""
   "    <signal name='EntryActivateRequest'>"
   "     <arg type='s' name='entry_id' />"
   "    </signal>"
@@ -249,6 +254,30 @@
 }
 
 static void
+on_service_active_menu_pointer_motion (PanelService    *service,
+                                       GDBusConnection *connection)
+{
+  GError *error = NULL;
+  gint    x=0, y=0;
+
+  panel_service_get_last_xy (service, &x, &y);
+
+  g_dbus_connection_emit_signal (connection,
+                                 S_NAME,
+                                 S_PATH,
+                                 S_IFACE,
+                                 "ActiveMenuPointerMotion",
+                                 g_variant_new ("(ii)", x, y),
+                                 &error);
+
+  if (error)
+    {
+      g_warning ("Unable to emit ActiveMenuPointerMotionsignal: %s", error->message);
+      g_error_free (error);
+    }
+}
+
+static void
 on_service_entry_activate_request (PanelService    *service,
                                    const gchar     *entry_id,
                                    GDBusConnection *connection)
@@ -310,6 +339,8 @@
                     G_CALLBACK (on_service_resync), connection);
   g_signal_connect (service, "entry-activated",
                     G_CALLBACK (on_service_entry_activated), connection);
+  g_signal_connect (service, "active-menu-pointer-motion",
+                    G_CALLBACK (on_service_active_menu_pointer_motion), connection);
   g_signal_connect (service, "entry-activate-request",
                     G_CALLBACK (on_service_entry_activate_request), connection);
   g_signal_connect (service, "entry-show-now-changed",
@@ -339,6 +370,7 @@
   {
     g_signal_handlers_disconnect_by_func (service, on_service_resync, connection);
     g_signal_handlers_disconnect_by_func (service, on_service_entry_activated, connection);
+    g_signal_handlers_disconnect_by_func (service, on_service_active_menu_pointer_motion, connection);
     g_signal_handlers_disconnect_by_func (service, on_service_entry_activate_request, connection);
     g_signal_handlers_disconnect_by_func (service, on_service_entry_show_now_changed, connection);
   }

=== modified file 'services/panel-service.c'
--- a/services/panel-service.c	2011-07-29 07:15:54 +0000
+++ b/services/panel-service.c	2011-07-22 14:05:38 +0000
@@ -62,6 +62,9 @@
   gint     last_right;
   gint     last_bottom;
   guint32  last_menu_button;
+
+  gint     last_menu_x;
+  gint     last_menu_y;
 };
 
 /* Globals */
@@ -71,6 +74,7 @@
 {
   ENTRY_ACTIVATED = 0,
   RE_SYNC,
+  ACTIVE_MENU_POINTER_MOTION,
   ENTRY_ACTIVATE_REQUEST,
   ENTRY_SHOW_NOW_CHANGED,
   GEOMETRIES_CHANGED,
@@ -169,6 +173,15 @@
                   g_cclosure_marshal_VOID__STRING,
                   G_TYPE_NONE, 1, G_TYPE_STRING);
 
+ _service_signals[ACTIVE_MENU_POINTER_MOTION] =
+    g_signal_new ("active-menu-pointer-motion",
+                  G_OBJECT_CLASS_TYPE (obj_class),
+                  G_SIGNAL_RUN_LAST,
+                  0,
+                  NULL, NULL,
+                  g_cclosure_marshal_VOID__VOID,
+                  G_TYPE_NONE, 0);
+
  _service_signals[ENTRY_ACTIVATE_REQUEST] =
     g_signal_new ("entry-activate-request",
                   G_OBJECT_CLASS_TYPE (obj_class),
@@ -236,6 +249,16 @@
 
           priv->last_menu_button = 0;
         }
+      else if (event && event->evtype == XI_Motion)
+        {
+          priv->last_menu_x = event->root_x;
+          priv->last_menu_y = event->root_y;
+
+          if (priv->last_menu_y <= priv->last_y)
+            {
+              g_signal_emit (self, _service_signals[ACTIVE_MENU_POINTER_MOTION], 0);
+            }
+        }
     }
 
   return ret;
@@ -1162,3 +1185,11 @@
                         abs(delta/120), direction);
 }
 
+void
+panel_service_get_last_xy   (PanelService  *self,
+                             gint          *x,
+                             gint          *y)
+{
+  *x = self->priv->last_menu_x;
+  *y = self->priv->last_menu_y;
+}

=== modified file 'services/panel-service.h'
--- a/services/panel-service.h	2011-07-29 07:15:54 +0000
+++ b/services/panel-service.h	2011-07-21 20:24:04 +0000
@@ -103,6 +103,10 @@
 						const gchar  *entry_id,
 						gint32       delta);
 
+void              panel_service_get_last_xy   (PanelService  *self,
+					       gint          *x,
+					       gint          *y);
+
 G_END_DECLS
 
 #endif /* _PANEL_SERVICE_H_ */

