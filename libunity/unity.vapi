/* unity.vapi generated by valac, do not modify. */

[CCode (cprefix = "Unity", lower_case_cprefix = "unity_")]
namespace Unity {
	[CCode (cprefix = "UnityDrag", lower_case_cprefix = "unity_drag_")]
	namespace Drag {
		[CCode (cheader_filename = "unity.h")]
		public class Controller : GLib.Object {
			public Controller ();
			public static unowned Unity.Drag.Controller get_default ();
			public void start_drag (Unity.Drag.Model model, float offset_x, float offset_y);
			public bool is_dragging { get; }
			public signal void drag_drop (Unity.Drag.Model model, float x, float y);
			public signal void drag_motion (Unity.Drag.Model model, float x, float y);
			public signal void drag_start (Unity.Drag.Model model);
		}
		[CCode (cheader_filename = "unity.h")]
		public interface Model : GLib.Object {
			public abstract string get_drag_data ();
			public abstract Clutter.Actor get_icon ();
		}
		[CCode (cheader_filename = "unity.h")]
		public static Unity.Drag.Controller? controller_singleton;
	}
	[CCode (cprefix = "UnityWebapp", lower_case_cprefix = "unity_webapp_")]
	namespace Webapp {
		[CCode (cheader_filename = "unity.h")]
		public class ChromiumWebApp : GLib.Object {
			public string id;
			public string name;
			public ChromiumWebApp (string address, string icon);
			public void add_to_favorites ();
			public string icon { get; construct; }
			public string url { get; construct; }
		}
		[CCode (cheader_filename = "unity.h")]
		public class FetchFile : GLib.Object {
			public FetchFile (string uri);
			public async void fetch_data ();
			public string uri { get; construct; }
			public signal void completed (GLib.ByteArray data);
			public signal void failed ();
		}
		[CCode (cheader_filename = "unity.h")]
		public class IconBuilder : GLib.Object {
			public IconBuilder (string dest, Gdk.Pixbuf source);
			public void build_icon ();
			public void load_layers ();
			public string destination { get; construct; }
			public Gdk.Pixbuf source { get; construct; }
		}
		[CCode (cheader_filename = "unity.h")]
		public class Prism : GLib.Object {
			public string id;
			public string name;
			public Prism (string address, string icon);
			public void add_to_favorites ();
			public string icon { get; construct; }
			public string url { get; construct; }
		}
		[CCode (cheader_filename = "unity.h")]
		public class WebiconFetcher : GLib.Object {
			public WebiconFetcher (string uri, string destination);
			public void fetch_webapp_data ();
			public string destination { get; construct; }
			public string uri { get; construct; }
			public signal void completed (string location);
			public signal void failed ();
		}
		[CCode (cheader_filename = "unity.h")]
		public static string urlify (string uri);
	}
	[CCode (cheader_filename = "unity.h")]
	public class Application : Unique.App {
		public Application ();
		public Unique.Response on_message_received (int command, Unique.MessageData data, uint time_);
		public Unity.Shell? shell { get; set; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class Entry : Ctk.Text {
		public Entry (string static_text);
		public string static_text { get; set construct; }
	}
	[CCode (ref_function = "unity_process_info_ref", unref_function = "unity_process_info_unref", cheader_filename = "unity.h")]
	public class ProcessInfo {
		public double end;
		public string name;
		public double start;
		public ProcessInfo (string name);
	}
	[CCode (cheader_filename = "unity.h")]
	public class ThemeImage : Clutter.Texture {
		public Gdk.Pixbuf? icon;
		public ThemeImage (string icon_name);
		public string icon_name { get; set construct; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class TimelineLogger : GLib.Object {
		public TimelineLogger ();
		public void end_process (string name);
		public static unowned Unity.TimelineLogger get_default ();
		public void start_process (string name);
		public void write_log (string filename);
	}
	[CCode (cheader_filename = "unity.h")]
	public interface Shell : GLib.Object {
		public abstract void ensure_input_region ();
		public abstract int get_indicators_width ();
		public abstract Unity.ShellMode get_mode ();
		public abstract Clutter.Stage get_stage ();
		public abstract void grab_keyboard (bool grab, uint32 timestamp);
		public abstract void show_unity ();
		public abstract void show_window_picker ();
		public abstract bool menus_swallow_events { get; }
		public signal void indicators_changed (int width);
	}
	[CCode (cprefix = "UNITY_APPLICATION_COMMANDS_", cheader_filename = "unity.h")]
	public enum ApplicationCommands {
		SHOW,
		MAKE_WEBAPP
	}
	[CCode (cprefix = "UNITY_SHELL_MODE_", cheader_filename = "unity.h")]
	public enum ShellMode {
		UNDERLAY,
		OVERLAY
	}
	[CCode (cprefix = "UNITY_DND_TARGETS_", cheader_filename = "unity.h")]
	public enum dnd_targets {
		TARGET_INT32,
		TARGET_STRING,
		TARGET_URL,
		TARGET_OTHER
	}
	[CCode (cheader_filename = "unity.h")]
	public static Unity.Shell? global_shell;
	[CCode (cheader_filename = "unity.h")]
	public static bool is_logging;
	[CCode (cheader_filename = "unity.h")]
	public static Unity.TimelineLogger? timeline_singleton;
}
