/* dee-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Dee", lower_case_cprefix = "dee_")]
namespace Dee {
	[Compact]
	[CCode (cheader_filename = "dee.h")]
	public class Filter {
		public weak GLib.DestroyNotify destroy;
		public weak Dee.ModelMapFunc map_func;
		public weak Dee.ModelMapNotify map_notify;
		public void* user_data;
	}
	[CCode (cheader_filename = "dee.h")]
	public class FilterModel : Dee.ProxyModel, Dee.Model {
		[CCode (type = "DeeModel*", has_construct_function = false)]
		public FilterModel (Dee.Filter filter, Dee.Model orig_model);
		public unowned Dee.ModelIter append_iter (Dee.ModelIter iter);
		public bool contains (Dee.ModelIter iter);
		public unowned Dee.ModelIter insert_iter (Dee.ModelIter iter, uint pos);
		public unowned Dee.ModelIter insert_iter_before (Dee.ModelIter iter, Dee.ModelIter pos);
		public unowned Dee.ModelIter prepend_iter (Dee.ModelIter iter);
		[NoAccessorMethod]
		public void* filter { get; construct; }
	}
	[Compact]
	[CCode (cheader_filename = "dee.h")]
	public class ModelIter {
	}
	[CCode (cheader_filename = "dee.h")]
	public class Peer : GLib.Object {
		public void connect ();
		public unowned string get_swarm_leader ();
		public unowned string get_swarm_name ();
		public bool is_swarm_leader ();
		public string swarm_leader { get; }
		[NoAccessorMethod]
		public string swarm_name { owned get; set construct; }
		public virtual signal void bye (string p0, string p1);
		public virtual signal void connected (string peer_name);
		public virtual signal void peer_found (string name);
		public virtual signal void peer_lost (string name);
		public virtual signal void ping (string p0);
		public virtual signal void pong (string p0);
	}
	[CCode (cheader_filename = "dee.h")]
	public class ProxyModel : Dee.VersionedModel, Dee.Model {
		[NoAccessorMethod]
		public Dee.Model back_end { owned get; construct; }
		[NoAccessorMethod]
		public bool proxy_signals { get; construct; }
	}
	[CCode (cheader_filename = "dee.h")]
	public class SequenceModel : Dee.VersionedModel, Dee.Model {
		[CCode (type = "DeeModel*", has_construct_function = false)]
		public SequenceModel (uint n_columns);
	}
	[CCode (cheader_filename = "dee.h")]
	public class SharedModel : Dee.ProxyModel, Dee.Model {
		[CCode (type = "DeeModel*", has_construct_function = false)]
		public SharedModel (string name, uint n_columns, ...);
		public void connect ();
		[CCode (type = "DeeModel*", has_construct_function = false)]
		public SharedModel.with_back_end (string name, Dee.Model back_end);
		[CCode (type = "DeeModel*", has_construct_function = false)]
		public SharedModel.with_name (string name);
		[NoAccessorMethod]
		public string columns { owned get; }
		[NoAccessorMethod]
		public uint64 seqnum { get; }
		[NoAccessorMethod]
		public uint size { get; }
		public virtual signal void ready ();
	}
	[CCode (cheader_filename = "dee.h")]
	public class VersionedModel : GLib.Object, Dee.Model {
		public virtual uint64 append_next_seqnum ();
		public virtual Dee.SeqnumState check_seqnum (uint64 seqnum);
		public virtual Dee.SeqnumState check_seqnums (GLib.Array seqnums);
		public virtual uint64 get_last_seqnum ();
		public virtual uint64 get_seqnum (uint pos);
		public virtual uint64 inc_seqnum (uint pos);
		public virtual uint64 insert_next_seqnum (uint pos);
		public virtual uint64 prepend_next_seqnum ();
		public virtual void remove_seqnum (uint pos);
		public virtual void set_last_seqnum (uint64 seqnum);
		public virtual void set_seqnum (uint pos, uint64 seqnum);
	}
	[CCode (cheader_filename = "dee.h")]
	public interface Model : GLib.Object {
		public unowned Dee.ModelIter append (...);
		public abstract unowned Dee.ModelIter append_valist (void* args);
		public unowned string build_col_spec ();
		public static bool check_type (GLib.Type type);
		public abstract void clear ();
		public abstract void freeze_signals ();
		public void @get (Dee.ModelIter iter, ...);
		public abstract bool get_bool (Dee.ModelIter iter, uint column);
		public abstract GLib.Type get_column_type (uint column);
		public abstract double get_double (Dee.ModelIter iter, uint column);
		public abstract unowned Dee.ModelIter get_first_iter ();
		public abstract int get_int (Dee.ModelIter iter, uint column);
		public abstract int64 get_int64 (Dee.ModelIter iter, uint column);
		public abstract unowned Dee.ModelIter get_iter_at_row (uint row);
		public abstract unowned Dee.ModelIter get_last_iter ();
		public abstract uint get_n_columns ();
		public abstract uint get_n_rows ();
		public abstract int get_position (Dee.ModelIter iter);
		public abstract unowned string get_string (Dee.ModelIter iter, uint column);
		public static GLib.Type get_type_for_signature (char chr);
		public abstract uchar get_uchar (Dee.ModelIter iter, uint column);
		public abstract uint get_uint (Dee.ModelIter iter, uint column);
		public abstract uint64 get_uint64 (Dee.ModelIter iter, uint column);
		public abstract void get_valist (Dee.ModelIter iter, void* args);
		public abstract void get_value (Dee.ModelIter iter, uint column, GLib.Value value);
		public unowned Dee.ModelIter insert (int pos, ...);
		public unowned Dee.ModelIter insert_before (Dee.ModelIter iter);
		public abstract unowned Dee.ModelIter insert_before_valist (Dee.ModelIter iter, void* args);
		public abstract unowned Dee.ModelIter insert_valist (int pos, void* args);
		public abstract bool is_first (Dee.ModelIter iter);
		public abstract bool is_last (Dee.ModelIter iter);
		public abstract unowned Dee.ModelIter next (Dee.ModelIter iter);
		public unowned Dee.ModelIter prepend (...);
		public abstract unowned Dee.ModelIter prepend_valist (void* args);
		public abstract unowned Dee.ModelIter prev (Dee.ModelIter iter);
		public abstract void remove (Dee.ModelIter iter);
		public void @set (Dee.ModelIter iter, ...);
		public abstract void set_column_type (uint column, GLib.Type type);
		public abstract void set_n_columns (uint n_columns);
		public abstract void set_valist (Dee.ModelIter iter, void* args);
		public abstract void set_value (Dee.ModelIter iter, uint column, GLib.Value value);
		public abstract void set_value_silently (Dee.ModelIter iter, uint column, GLib.Value value);
		public abstract void thaw_signals ();
	}
	[CCode (cprefix = "DEE_SEQNUM_STATE_", has_type_id = false, cheader_filename = "dee.h")]
	public enum SeqnumState {
		NOT_CONSECUTIVE,
		IN_THE_FUTURE,
		IN_THE_PAST,
		OK
	}
	[CCode (cprefix = "DEE_SHARED_MODEL_ERROR_LEADER_", has_type_id = false, cheader_filename = "dee.h")]
	public enum SharedModelError {
		INVALIDATED
	}
	[CCode (cheader_filename = "dee.h")]
	public delegate void ModelMapFunc (Dee.Model orig_model, Dee.FilterModel filter_model);
	[CCode (cheader_filename = "dee.h")]
	public delegate void ModelMapNotify (Dee.Model orig_model, Dee.ModelIter orig_iter, Dee.FilterModel filter_model);
	[CCode (cheader_filename = "dee.h")]
	public const string PEER_DBUS_IFACE;
	[CCode (cheader_filename = "dee.h")]
	public const string SEQUENCE_MODEL_DBUS_IFACE;
	[CCode (cheader_filename = "dee.h")]
	public const string SHARED_MODEL_DBUS_IFACE;
}
