/* gnome-desktop-2.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gnome", lower_case_cprefix = "gnome_")]
namespace Gnome {
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class BG : GLib.Object {
		[CCode (has_construct_function = false)]
		public BG ();
		public bool changes_with_time ();
		public unowned Gdk.Pixbuf create_frame_thumbnail (Gnome.DesktopThumbnailFactory factory, Gdk.Screen screen, int dest_width, int dest_height, int frame_num);
		public unowned Gdk.Pixmap create_pixmap (Gdk.Window window, int width, int height, bool root);
		public unowned Gdk.Pixbuf create_thumbnail (Gnome.DesktopThumbnailFactory factory, Gdk.Screen screen, int dest_width, int dest_height);
		public void draw (Gdk.Pixbuf dest, Gdk.Screen screen, bool is_root);
		public void get_color (Gnome.BGColorType type, Gdk.Color primary, Gdk.Color secondary);
		public unowned string get_filename ();
		public bool get_image_size (Gnome.DesktopThumbnailFactory factory, int best_width, int best_height, int width, int height);
		public static unowned Gdk.Pixmap get_pixmap_from_root (Gdk.Screen screen);
		public Gnome.BGPlacement get_placement ();
		public bool has_multiple_sizes ();
		public bool is_dark (int dest_width, int dest_height);
		public void load_from_preferences (GConf.Client client);
		public void save_to_preferences (GConf.Client client);
		public void set_color (Gnome.BGColorType type, Gdk.Color primary, Gdk.Color secondary);
		public void set_filename (string filename);
		public static void set_pixmap_as_root (Gdk.Screen screen, Gdk.Pixmap pixmap);
		public static unowned Gnome.BGCrossfade set_pixmap_as_root_with_crossfade (Gdk.Screen screen, Gdk.Pixmap pixmap);
		public void set_placement (Gnome.BGPlacement placement);
		public virtual signal void changed ();
		public virtual signal void transitioned ();
	}
	[Compact]
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class BGClass {
	}
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class BGCrossfade : GLib.Object {
		[CCode (has_construct_function = false)]
		public BGCrossfade (int width, int height);
		public bool is_started ();
		public bool set_end_pixmap (Gdk.Pixmap pixmap);
		public bool set_start_pixmap (Gdk.Pixmap pixmap);
		public void start (Gdk.Window window);
		public void stop ();
		[NoAccessorMethod]
		public int height { get; construct; }
		[NoAccessorMethod]
		public int width { get; construct; }
		public virtual signal void finished (GLib.Object window);
	}
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class DesktopThumbnailFactory : GLib.Object {
		[CCode (has_construct_function = false)]
		public DesktopThumbnailFactory (Gnome.DesktopThumbnailSize size);
		public bool can_thumbnail (string uri, string mime_type, ulong mtime);
		public void create_failed_thumbnail (string uri, ulong mtime);
		public unowned Gdk.Pixbuf generate_thumbnail (string uri, string mime_type);
		public bool has_valid_failed_thumbnail (string uri, ulong mtime);
		public unowned string lookup (string uri, ulong mtime);
		public void save_thumbnail (Gdk.Pixbuf thumbnail, string uri, ulong original_mtime);
	}
	[Compact]
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class OutputInfo {
		public double aspect;
		public bool connected;
		public weak string display_name;
		public int height;
		public weak string name;
		public bool on;
		public int pref_height;
		public int pref_width;
		public bool primary;
		public uint product;
		public int rate;
		public Gnome.RRRotation rotation;
		public uint serial;
		public void* user_data;
		[CCode (array_length = false)]
		public weak string[] vendor;
		public int width;
		public int x;
		public int y;
	}
	[Compact]
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class RRConfig {
		public bool clone;
		public weak Gnome.OutputInfo outputs;
		public bool applicable (Gnome.RRScreen screen) throws GLib.Error;
		public bool apply (Gnome.RRScreen screen) throws GLib.Error;
		public static bool apply_from_filename (Gnome.RRScreen screen, string filename) throws GLib.Error;
		public static bool apply_from_filename_with_time (Gnome.RRScreen screen, string filename, uint32 timestamp) throws GLib.Error;
		public static bool apply_stored (Gnome.RRScreen screen) throws GLib.Error;
		public bool apply_with_time (Gnome.RRScreen screen, uint32 timestamp) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public RRConfig.current (Gnome.RRScreen screen);
		public bool equal (Gnome.RRConfig config2);
		public static unowned string get_backup_filename ();
		public static unowned string get_intended_filename ();
		public bool match (Gnome.RRConfig config2);
		public void sanitize ();
		public bool save () throws GLib.Error;
		[CCode (has_construct_function = false)]
		public RRConfig.stored (Gnome.RRScreen screen) throws GLib.Error;
	}
	[Compact]
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class RRCrtc {
		public bool can_drive_output (Gnome.RROutput output);
		public unowned Gnome.RRMode get_current_mode ();
		public Gnome.RRRotation get_current_rotation ();
		public bool get_gamma (int size, uint red, uint green, uint blue);
		public uint32 get_id ();
		public void get_position (int x, int y);
		public Gnome.RRRotation get_rotations ();
		public bool set_config (int x, int y, Gnome.RRMode mode, Gnome.RRRotation rotation, Gnome.RROutput[] outputs) throws GLib.Error;
		public bool set_config_with_time (uint32 timestamp, int x, int y, Gnome.RRMode mode, Gnome.RRRotation rotation, Gnome.RROutput[] outputs) throws GLib.Error;
		public void set_gamma (int size, uint red, uint green, uint blue);
		public bool supports_rotation (Gnome.RRRotation rotation);
	}
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class RRLabeler : GLib.Object {
		[CCode (has_construct_function = false)]
		public RRLabeler (Gnome.RRConfig config);
		public void get_color_for_output (Gnome.OutputInfo output, Gdk.Color color_out);
		public void hide ();
	}
	[Compact]
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class RRLabelerClass {
	}
	[Compact]
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class RRMode {
		public int get_freq ();
		public uint get_height ();
		public uint32 get_id ();
		public uint get_width ();
	}
	[Compact]
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public class RROutput {
		public bool can_clone (Gnome.RROutput clone);
		public unowned string get_connector_type ();
		public unowned Gnome.RRCrtc get_crtc ();
		public unowned Gnome.RRMode get_current_mode ();
		public uchar get_edid_data ();
		public int get_height_mm ();
		public uint32 get_id ();
		public bool get_is_primary ();
		public unowned string get_name ();
		public void get_position (int x, int y);
		public unowned Gnome.RRCrtc get_possible_crtcs ();
		public unowned Gnome.RRMode get_preferred_mode ();
		public int get_size_inches ();
		public int get_width_mm ();
		public bool is_connected ();
		public bool is_laptop ();
		public unowned Gnome.RRMode list_modes ();
		public bool supports_mode (Gnome.RRMode mode);
	}
	[Compact]
	[CCode (free_function = "gnome_rr_screen_destroy", cheader_filename = "gnome-desktop-2.0.h")]
	public class RRScreen {
		[CCode (has_construct_function = false)]
		public RRScreen (Gdk.Screen screen, Gnome.RRScreenChanged callback, void* data) throws GLib.Error;
		public unowned Gnome.RRCrtc get_crtc_by_id (uint32 id);
		public unowned Gnome.RROutput get_output_by_id (uint32 id);
		public unowned Gnome.RROutput get_output_by_name (string name);
		public void get_ranges (int min_width, int max_width, int min_height, int max_height);
		public void get_timestamps (uint32 change_timestamp_ret, uint32 config_timestamp_ret);
		public unowned Gnome.RRMode list_clone_modes ();
		public unowned Gnome.RRCrtc list_crtcs ();
		public unowned Gnome.RRMode list_modes ();
		public unowned Gnome.RROutput list_outputs ();
		public bool refresh () throws GLib.Error;
		public void set_primary_output (Gnome.RROutput output);
		public void set_size (int width, int height, int mm_width, int mm_height);
	}
	[CCode (cprefix = "GNOME_BG_COLOR_", has_type_id = false, cheader_filename = "gnome-desktop-2.0.h")]
	public enum BGColorType {
		SOLID,
		H_GRADIENT,
		V_GRADIENT
	}
	[CCode (cprefix = "GNOME_BG_PLACEMENT_", has_type_id = false, cheader_filename = "gnome-desktop-2.0.h")]
	public enum BGPlacement {
		TILED,
		ZOOMED,
		CENTERED,
		SCALED,
		FILL_SCREEN,
		SPANNED
	}
	[CCode (cprefix = "GNOME_DESKTOP_THUMBNAIL_SIZE_", has_type_id = false, cheader_filename = "gnome-desktop-2.0.h")]
	public enum DesktopThumbnailSize {
		NORMAL,
		LARGE
	}
	[CCode (cprefix = "GNOME_RR_ERROR_", has_type_id = false, cheader_filename = "gnome-desktop-2.0.h")]
	public enum RRError {
		UNKNOWN,
		NO_RANDR_EXTENSION,
		RANDR_ERROR,
		BOUNDS_ERROR,
		CRTC_ASSIGNMENT,
		NO_MATCHING_CONFIG
	}
	[CCode (cprefix = "GNOME_RR_", has_type_id = false, cheader_filename = "gnome-desktop-2.0.h")]
	public enum RRRotation {
		ROTATION_0,
		ROTATION_90,
		ROTATION_180,
		ROTATION_270,
		REFLECT_X,
		REFLECT_Y
	}
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public delegate void RRScreenChanged (Gnome.RRScreen screen);
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public const string BG_KEY_DIR;
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public const string RR_CONNECTOR_TYPE_PANEL;
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public static bool desktop_thumbnail_has_uri (Gdk.Pixbuf pixbuf, string uri);
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public static bool desktop_thumbnail_is_valid (Gdk.Pixbuf pixbuf, string uri, ulong mtime);
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public static unowned string desktop_thumbnail_md5 (string uri);
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public static unowned string desktop_thumbnail_path_for_uri (string uri, Gnome.DesktopThumbnailSize size);
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public static unowned Gdk.Pixbuf desktop_thumbnail_scale_down_pixbuf (Gdk.Pixbuf pixbuf, int dest_width, int dest_height);
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public static unowned Gnome.RRMode rr_create_clone_modes (Gnome.RRScreen screen);
	[CCode (cheader_filename = "gnome-desktop-2.0.h")]
	public static GLib.Quark rr_error_quark ();
	[CCode (cname = "ubuntu_compute_virtual_size_for_configuration", cheader_filename = "gnome-desktop-2.0.h")]
	public static void ubuntu_compute_virtual_size_for_configuration (Gnome.RRConfig config, int ret_width, int ret_height);
	[CCode (cname = "ubuntu_gnome_rr_config_save_desired", cheader_filename = "gnome-desktop-2.0.h")]
	public static bool ubuntu_gnome_rr_config_save_desired (Gnome.RRConfig configuration) throws GLib.Error;
}
