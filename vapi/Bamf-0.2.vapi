/* Bamf-0.2.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Bamf", lower_case_cprefix = "bamf_")]
namespace Bamf {
	[CCode (cheader_filename = "libbamf/libbamf.h")]
	public class Application : Bamf.View {
		public weak Bamf.View parent;
		public Bamf.ApplicationPrivate priv;
		public unowned string get_application_type ();
		public unowned string get_desktop_file ();
		public unowned GLib.List get_windows ();
		public GLib.Array get_xids ();
		public signal void window_added (Bamf.View object);
		public signal void window_removed (Bamf.View object);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h")]
	public class Control : GLib.Object {
		public weak GLib.Object parent;
		public Bamf.ControlPrivate priv;
		public static Bamf.Control get_default ();
		public void insert_desktop_file (string desktop_file);
		public void register_application_for_pid (string application, int32 pid);
		public void register_tab_provider (string path);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h")]
	public class Factory : GLib.Object {
		public weak GLib.Object parent;
		public Bamf.FactoryPrivate priv;
		public static Bamf.Factory get_default ();
		public Bamf.View view_for_path (string path);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h")]
	public class Matcher : GLib.Object {
		public weak GLib.Object parent;
		public Bamf.MatcherPrivate priv;
		public bool application_is_running (string application);
		public Bamf.Application get_active_application ();
		public Bamf.Window get_active_window ();
		public unowned Bamf.Application get_application_for_xid (uint32 xid);
		public unowned GLib.List get_applications ();
		public static unowned Bamf.Matcher get_default ();
		public unowned GLib.List get_running_applications ();
		public unowned GLib.List get_tabs ();
		public GLib.Array get_xids_for_application (string application);
		public signal void active_application_changed (GLib.Object object, GLib.Object p0);
		public signal void active_window_changed (GLib.Object object, GLib.Object p0);
		public signal void view_closed (GLib.Object object);
		public signal void view_opened (GLib.Object object);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h")]
	public class TabSource : GLib.Object {
		public weak GLib.Object parent;
		public Bamf.TabSourcePrivate priv;
		public string[] get_tab_ids ();
		public GLib.Array get_tab_preview (owned string tab_id);
		public string get_tab_uri (owned string tab_id);
		public uint32 get_tab_xid (owned string tab_id);
		public virtual void show_tab (owned string tab_id);
		public virtual string[] tab_ids ();
		public virtual GLib.Array tab_preview (owned string tab_id);
		public virtual string tab_uri (owned string tab_id);
		public virtual uint32 tab_xid (owned string tab_id);
		public string id { get; set construct; }
		public signal void tab_closed (string object);
		public signal void tab_opened (string object);
		public signal void tab_uri_changed (string object, string p0, string p1);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h")]
	public class View : GLib.Object {
		public weak GLib.Object parent;
		public Bamf.ViewPrivate priv;
		public virtual GLib.List get_children ();
		public virtual string get_icon ();
		public virtual string get_name ();
		public unowned Bamf.View get_parent ();
		public string get_view_type ();
		public virtual bool is_active ();
		public virtual bool is_running ();
		public virtual bool is_urgent ();
		public bool user_visible ();
		public virtual string view_type ();
		public string path { get; set construct; }
		public signal void active_changed (bool object);
		public signal void child_added (Bamf.View object);
		public signal void child_removed (Bamf.View object);
		public signal void closed ();
		public signal void running_changed (bool object);
		public signal void urgent_changed (bool object);
		public signal void user_visible_changed (bool object);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h")]
	public class Window : Bamf.View {
		public weak Bamf.View parent;
		public Bamf.WindowPrivate priv;
		public uint32 get_xid ();
	}
	[CCode (type_id = "BAMF_TYPE_APPLICATION_PRIVATE", cheader_filename = "libbamf/libbamf.h")]
	public struct ApplicationPrivate {
	}
	[CCode (type_id = "BAMF_TYPE_CONTROL_PRIVATE", cheader_filename = "libbamf/libbamf.h")]
	public struct ControlPrivate {
	}
	[CCode (type_id = "BAMF_TYPE_FACTORY_PRIVATE", cheader_filename = "libbamf/libbamf.h")]
	public struct FactoryPrivate {
	}
	[CCode (type_id = "BAMF_TYPE_MATCHER_PRIVATE", cheader_filename = "libbamf/libbamf.h")]
	public struct MatcherPrivate {
	}
	[CCode (type_id = "BAMF_TYPE_TAB_SOURCE_PRIVATE", cheader_filename = "libbamf/libbamf.h")]
	public struct TabSourcePrivate {
	}
	[CCode (type_id = "BAMF_TYPE_VIEW_PRIVATE", cheader_filename = "libbamf/libbamf.h")]
	public struct ViewPrivate {
	}
	[CCode (type_id = "BAMF_TYPE_WINDOW_PRIVATE", cheader_filename = "libbamf/libbamf.h")]
	public struct WindowPrivate {
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", has_target = false)]
	public delegate bool GMarshalFunc_BOOLEAN__STRING_POINTER (void* data1, void* arg_1, void* arg_2, void* data2);
	[CCode (cheader_filename = "libbamf/libbamf.h", has_target = false)]
	public delegate void* GMarshalFunc_BOXED__STRING (void* data1, void* arg_1, void* data2);
	[CCode (cheader_filename = "libbamf/libbamf.h", has_target = false)]
	public delegate void* GMarshalFunc_BOXED__VOID (void* data1, void* data2);
	[CCode (cheader_filename = "libbamf/libbamf.h", has_target = false)]
	public delegate string GMarshalFunc_STRING__STRING (void* data1, void* arg_1, void* data2);
	[CCode (cheader_filename = "libbamf/libbamf.h", has_target = false)]
	public delegate uint GMarshalFunc_UINT__STRING (void* data1, void* arg_1, void* data2);
	[CCode (cname = "dbus_glib_marshal_bamf_tab_source_BOOLEAN__STRING_POINTER", cheader_filename = "libbamf/libbamf.h")]
	public static void dbus_glib_marshal_bamf_tab_source_BOOLEAN__STRING_POINTER (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cname = "dbus_glib_marshal_bamf_tab_source_BOXED__STRING", cheader_filename = "libbamf/libbamf.h")]
	public static void dbus_glib_marshal_bamf_tab_source_BOXED__STRING (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cname = "dbus_glib_marshal_bamf_tab_source_BOXED__VOID", cheader_filename = "libbamf/libbamf.h")]
	public static void dbus_glib_marshal_bamf_tab_source_BOXED__VOID (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cname = "dbus_glib_marshal_bamf_tab_source_STRING__STRING", cheader_filename = "libbamf/libbamf.h")]
	public static void dbus_glib_marshal_bamf_tab_source_STRING__STRING (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cname = "dbus_glib_marshal_bamf_tab_source_UINT__STRING", cheader_filename = "libbamf/libbamf.h")]
	public static void dbus_glib_marshal_bamf_tab_source_UINT__STRING (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
}
